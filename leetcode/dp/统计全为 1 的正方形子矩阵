[1277. 统计全为 1 的正方形子矩阵](https://leetcode-cn.com/problems/count-square-submatrices-with-all-ones/)

这个问题可以从两个角度去思考：
1. 暴力求解（当前坐标为正方形的左上顶点）：以当前坐标为正方形的 左上方顶点，计算以该顶点出发，计算长度从1开始的正方形的个数，但是会重复去判断以那个长度为边的正方形内部的顶点是否为1，这样会重复判断。
2. 动态规划（当前坐标为正方形的右下顶点）：f\[x]\[y] = min(f\[x-1]\[y], f\[x]\[y-1], f\[x-1]\[y-1])（ps：一开始看的时候，可能不理解，画张图就非常的直白了），f\[x]\[y]是正方形的右下顶点，为正方形最大边长

```go
func countSquares(matrix [][]int) int {
    dp := make([][]int, len(matrix))
    for i := 0;i < len(matrix);i++ {
        dp[i] = make([]int, len(matrix[i]))
    }
    maxVal := 0
    for i := 0;i < len(matrix);i++ {
        for j := 0;j < len(matrix[i]);j++ {
            if matrix[i][j] == 1 {
                a, b, c := 0, 0, 0
                if i - 1 >= 0 {
                    a = dp[i-1][j]
                }
                if j - 1 >= 0 {
                    b = dp[i][j-1]
                }
                if i - 1 >= 0 && j - 1 >= 0 {
                    c = dp[i-1][j-1]
                }
                dp[i][j] = min(a, b, c) + 1
                maxVal += dp[i][j]
            }
        }
    }
    return maxVal
}

func min(a, b, c int) int {
    if a > b {
        a = b
    }
    if a > c {
        a = c
    }
    return a
}
```
